package com.event.wear.platform.rent.interfaces.rest;import com.event.wear.platform.rent.domain.model.commands.DeleteCartItemCommand;import com.event.wear.platform.rent.domain.model.queries.GetAllCartItemsByUserIdQuery;import com.event.wear.platform.rent.domain.model.queries.GetAllCartItemsQuery;import com.event.wear.platform.rent.domain.model.queries.GetShoppingCartIdByUserIdQuery;import com.event.wear.platform.rent.domain.services.ShoppingCartCommandService;import com.event.wear.platform.rent.domain.services.ShoppingCartQueryService;import com.event.wear.platform.rent.interfaces.rest.resources.AddItemToCartResource;import com.event.wear.platform.rent.interfaces.rest.resources.CartItemResource;import com.event.wear.platform.rent.interfaces.rest.resources.ShoppingCartResource;import com.event.wear.platform.rent.interfaces.rest.resources.UpdateCartItemResource;import com.event.wear.platform.rent.interfaces.rest.transform.AddItemToCartCommandFromResourceAssembler;import com.event.wear.platform.rent.interfaces.rest.transform.CartItemResourceFromEntityAssembler;import com.event.wear.platform.rent.interfaces.rest.transform.ShoppingCartResourceFromEntityAssembler;import com.event.wear.platform.rent.interfaces.rest.transform.UpdateCartItemCommandFromResourceAssembler;import io.swagger.v3.oas.annotations.tags.Tag;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@RestController@RequestMapping(value = "/api/v1/cart", produces = MediaType.APPLICATION_JSON_VALUE)@Tag(name = "Rent", description = "Rent Management Endpoints")public class ShoppingCartController {    private final ShoppingCartCommandService shoppingCartCommandService;    private final ShoppingCartQueryService shoppingCartQueryService;    public ShoppingCartController(ShoppingCartCommandService shoppingCartCommandService, ShoppingCartQueryService shoppingCartQueryService) {        this.shoppingCartCommandService = shoppingCartCommandService;        this.shoppingCartQueryService = shoppingCartQueryService;    }    @PutMapping("/update/{userId}/{cartItemId}")    public ResponseEntity<Void> updateCartItem(@PathVariable Long userId, @PathVariable Long cartItemId, @RequestBody UpdateCartItemResource updateCartItemResource) {        var updateCartItemCommand = new UpdateCartItemCommandFromResourceAssembler().toCommandFromResource(userId, cartItemId, updateCartItemResource);        shoppingCartCommandService.handle(updateCartItemCommand);        return ResponseEntity.ok().build();    }   @DeleteMapping("/delete/{userId}/{cartItemId}")    public ResponseEntity<Void> deleteCartItem(@PathVariable Long userId, @PathVariable Long cartItemId) {        var deleteCartItemCommand = new DeleteCartItemCommand(userId, cartItemId);        shoppingCartCommandService.handle(deleteCartItemCommand);        return ResponseEntity.noContent().build();    }    @PostMapping("/add/{userId}")    public ResponseEntity<CartItemResource> addCartItem(@PathVariable Long userId, @RequestBody AddItemToCartResource addItemToCartResource) {        var addCartItemCommand = new AddItemToCartCommandFromResourceAssembler().toCommandFromResource(userId, addItemToCartResource);        var cartItem = shoppingCartCommandService.handle(addCartItemCommand);        if (cartItem == null) {            return ResponseEntity.badRequest().build();        }        var cartItemResource = new CartItemResourceFromEntityAssembler().toResourceFromEntity(cartItem);        return new ResponseEntity<>(cartItemResource, HttpStatus.CREATED);    }    @GetMapping("/all-cartItems")    public ResponseEntity<List<CartItemResource>> getAllCartItems() {        var cartItems = shoppingCartQueryService.handle(new GetAllCartItemsQuery());        var cartItemResources = cartItems.stream()            .map(new CartItemResourceFromEntityAssembler()::toResourceFromEntity)            .collect(Collectors.toList());        return ResponseEntity.ok(cartItemResources);    }    @GetMapping("/shoppingcartId/{userId}")    public ResponseEntity<Optional<ShoppingCartResource>> getShoppingCartIdByUserId(@PathVariable Long userId) {        var shoppingCart = shoppingCartQueryService.handle(new GetShoppingCartIdByUserIdQuery(userId));        if (shoppingCart.isPresent()) {            var shoppingCartResource = ShoppingCartResourceFromEntityAssembler.toResourceFromEntity(shoppingCart.get());            return ResponseEntity.ok(Optional.of(shoppingCartResource));        } else {            return ResponseEntity.ok(Optional.empty());        }    }    @GetMapping("/cartItems/{userId}")    public ResponseEntity<List<CartItemResource>> getAllCartItemsByUserId(@PathVariable Long userId) {        var cartItems = shoppingCartQueryService.handle(new GetAllCartItemsByUserIdQuery(userId));        var cartItemResources = cartItems.stream()            .map(new CartItemResourceFromEntityAssembler()::toResourceFromEntity)            .collect(Collectors.toList());        return ResponseEntity.ok(cartItemResources);    }}