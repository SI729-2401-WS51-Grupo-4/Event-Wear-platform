package com.event.wear.platform.rent.interfaces.rest;import com.event.wear.platform.rent.domain.model.aggregates.ShoppingCart;import com.event.wear.platform.rent.domain.model.commands.DeleteCartItemCommand;import com.event.wear.platform.rent.domain.model.commands.UpdateCartItemCommand;import com.event.wear.platform.rent.domain.model.queries.GetAllCartItemsByUserIdQuery;import com.event.wear.platform.rent.domain.model.queries.GetAllCartItemsQuery;import com.event.wear.platform.rent.domain.model.queries.GetShoppingCartIdByUserIdQuery;import com.event.wear.platform.rent.domain.services.ShoppingCartCommandService;import com.event.wear.platform.rent.domain.services.ShoppingCartQueryService;import com.event.wear.platform.rent.interfaces.rest.resources.AddItemToCartResource;import com.event.wear.platform.rent.interfaces.rest.resources.CartItemResource;import com.event.wear.platform.rent.interfaces.rest.resources.DeleteCartItemResource;import com.event.wear.platform.rent.interfaces.rest.resources.UpdateCartItemResource;import com.event.wear.platform.rent.interfaces.rest.transform.AddItemToCartCommandFromResourceAssembler;import com.event.wear.platform.rent.interfaces.rest.transform.CartItemResourceFromEntityAssembler;import com.event.wear.platform.rent.interfaces.rest.transform.DeleteCartItemCommandFromResourceAssembler;import com.event.wear.platform.rent.interfaces.rest.transform.UpdateCartItemCommandFromResourceAssembler;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Map;import java.util.Optional;@RestController@RequestMapping("/cart")public class ShoppingCartController {    private final ShoppingCartCommandService commandService;    private final ShoppingCartQueryService queryService;    private final AddItemToCartCommandFromResourceAssembler addItemAssembler;    private final DeleteCartItemCommandFromResourceAssembler deleteItemAssembler;    private final UpdateCartItemCommandFromResourceAssembler updateItemAssembler;    public ShoppingCartController(ShoppingCartCommandService commandService, ShoppingCartQueryService queryService, AddItemToCartCommandFromResourceAssembler addItemAssembler, DeleteCartItemCommandFromResourceAssembler deleteItemAssembler, UpdateCartItemCommandFromResourceAssembler updateItemAssembler) {        this.commandService = commandService;        this.queryService = queryService;        this.addItemAssembler = addItemAssembler;        this.deleteItemAssembler = deleteItemAssembler;        this.updateItemAssembler = updateItemAssembler;    }    @DeleteMapping("/delete/{userId}/{cartItemId}")    public ResponseEntity<Void> deleteCartItem(@PathVariable Long userId, @PathVariable Long cartItemId) {        DeleteCartItemResource resource = new DeleteCartItemResource(userId, cartItemId);        DeleteCartItemCommand command = deleteItemAssembler.toCommandFromResource(resource);        commandService.handle(command);        return ResponseEntity.ok().build();    }    @PutMapping("/update")    public ResponseEntity<Void> updateCartItem(@RequestBody UpdateCartItemResource resource) {        UpdateCartItemCommand command = updateItemAssembler.toCommandFromResource(resource);        commandService.handle(command);        return ResponseEntity.ok().build();    }    @GetMapping("/items/{userId}")    public ResponseEntity<Optional<ShoppingCart>> getAllCartItemsByUserId(@PathVariable Long userId) {    Optional<ShoppingCart> items = queryService.handle(new GetAllCartItemsByUserIdQuery(userId));    return ResponseEntity.ok(items);    }    @GetMapping("/id/{userId}")    public ResponseEntity<List<Map<String, Object>>> getShoppingCartIdByUserId(@PathVariable Long userId) {    List<Map<String, Object>> shoppingCartId = queryService.handle(new GetShoppingCartIdByUserIdQuery(userId));    return ResponseEntity.ok(shoppingCartId);    }   @PostMapping("/add")    public ResponseEntity<CartItemResource> addItemToCart(@RequestBody AddItemToCartResource resource) {        var addCartItemCommand = new AddItemToCartCommandFromResourceAssembler().toCommandFromResource(resource);        var cartItem = commandService.handle(addCartItemCommand);        if (cartItem == null) {            return ResponseEntity.badRequest().build();        }        var cartItemResource = CartItemResourceFromEntityAssembler.toResourceFromEntity(cartItem);        return new ResponseEntity<>(cartItemResource, HttpStatus.CREATED);    }    @GetMapping("/items/all")    public ResponseEntity<List<Map<String, Object>>> getAllCartItems() {        List<Map<String, Object>> items = queryService.handle(new GetAllCartItemsQuery());        return ResponseEntity.ok(items);    }}